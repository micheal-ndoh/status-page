generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Team {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  logo        String?
  domain      String?  @unique
  ownerId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  owner       User         @relation("TeamOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  members     TeamMember[]
  services    Service[]
  incidents   Incident[]
  invites     TeamInvite[]
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String     @unique
  emailVerified DateTime?
  image         String?
  role          UserRole   @default(USER)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  
  accounts      Account[]
  sessions      Session[]
  teamMemberships TeamMember[]
  ownedTeams    Team[]     @relation("TeamOwner")
  incidents     Incident[]
}

model TeamMember {
  id        String      @id @default(cuid())
  teamId    String
  userId    String
  role      TeamRole    @default(MEMBER)
  joinedAt  DateTime    @default(now())
  
  team      Team        @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([teamId, userId])
}

model TeamInvite {
  id        String      @id @default(cuid())
  teamId    String
  email     String
  role      TeamRole    @default(MEMBER)
  token     String      @unique
  expiresAt DateTime
  createdAt DateTime    @default(now())
  
  team      Team        @relation(fields: [teamId], references: [id], onDelete: Cascade)
  
  @@unique([teamId, email])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("VerificationToken")
}

model Service {
  id          String        @id @default(cuid())
  name        String
  description String?
  status      ServiceStatus @default(OPERATIONAL)
  url         String?
  logo        String?
  teamId      String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  team        Team          @relation(fields: [teamId], references: [id], onDelete: Cascade)
  incidents   Incident[]    @relation("IncidentToService")
}

model Incident {
  id          String               @id @default(cuid())
  title       String
  description String
  status      IncidentStatus       @default(INVESTIGATING)
  severity    IncidentSeverity     @default(MINOR)
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  resolvedAt  DateTime?
  authorId    String
  teamId      String
  author      User                 @relation(fields: [authorId], references: [id], onDelete: Cascade)
  team        Team                 @relation(fields: [teamId], references: [id], onDelete: Cascade)
  attachments IncidentAttachment[]
  updates     IncidentUpdate[]
  services    Service[]            @relation("IncidentToService")
}

model IncidentUpdate {
  id         String         @id @default(cuid())
  message    String
  status     IncidentStatus
  createdAt  DateTime       @default(now())
  incidentId String
  incident   Incident       @relation(fields: [incidentId], references: [id], onDelete: Cascade)
}

model IncidentAttachment {
  id           String   @id @default(cuid())
  filename     String
  originalName String
  mimeType     String
  size         Int
  url          String
  createdAt    DateTime @default(now())
  incidentId   String
  incident     Incident @relation(fields: [incidentId], references: [id], onDelete: Cascade)
}

enum UserRole {
  ADMIN
  USER
}

enum TeamRole {
  OWNER
  ADMIN
  MEMBER
}

enum ServiceStatus {
  OPERATIONAL
  DEGRADED_PERFORMANCE
  PARTIAL_OUTAGE
  MAJOR_OUTAGE
  MAINTENANCE
}

enum IncidentStatus {
  INVESTIGATING
  IDENTIFIED
  MONITORING
  RESOLVED
}

enum IncidentSeverity {
  MINOR
  MAJOR
  CRITICAL
}
