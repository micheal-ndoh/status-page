// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  incidents Incident[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("VerificationToken")
}

model Service {
  id          String        @id @default(cuid())
  name        String
  description String?
  status      ServiceStatus @default(OPERATIONAL)
  url         String?
  logo        String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  incidents Incident[]
}

model Incident {
  id          String           @id @default(cuid())
  title       String
  description String
  status      IncidentStatus   @default(INVESTIGATING)
  severity    IncidentSeverity @default(MINOR)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  resolvedAt  DateTime?
  
  authorId    String
  author      User             @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  services    Service[]
  updates     IncidentUpdate[]
  attachments IncidentAttachment[]
}

model IncidentUpdate {
  id          String         @id @default(cuid())
  message     String
  status      IncidentStatus
  createdAt   DateTime       @default(now())
  
  incidentId  String
  incident    Incident       @relation(fields: [incidentId], references: [id], onDelete: Cascade)
}

model IncidentAttachment {
  id          String   @id @default(cuid())
  filename    String
  originalName String
  mimeType    String
  size        Int
  url         String
  createdAt   DateTime @default(now())
  
  incidentId  String
  incident    Incident @relation(fields: [incidentId], references: [id], onDelete: Cascade)
}

enum UserRole {
  ADMIN
  USER
}

enum ServiceStatus {
  OPERATIONAL
  DEGRADED_PERFORMANCE
  PARTIAL_OUTAGE
  MAJOR_OUTAGE
  MAINTENANCE
}

enum IncidentStatus {
  INVESTIGATING
  IDENTIFIED
  MONITORING
  RESOLVED
}

enum IncidentSeverity {
  MINOR
  MAJOR
  CRITICAL
} 